import matplotlib.pyplot as plt
 
#for Canopy users
import matplotlib.animation as animation
 
#for EPD users
#matplotlib.use('TkAgg')  
 
import math
import numpy as np
import matplotlib.pyplot as plt
import random as rnd
 
 
 
n = 100
m = 5
cost = [[17,
 40,
 35,
 24,
 50,
 15,
 31,
 38,
 48,
 18,
 16,
 44,
 41,
 10,
 26,
 50,
 48,
 20,
 24,
 12,
 48,
 24,
 34,
 39,
 14,
 32,
 47,
 10,
 45,
 15,
 22,
 20,
 44,
 41,
 49,
 10,
 30,
 6,
 20,
 37,
 19,
 12,
 14,
 31,
 28,
 22,
 38,
 47,
 12,
 29,
 31,
 30,
 30,
 29,
 50,
 39,
 44,
 23,
 37,
 48,
 23,
 18,
 21,
 26,
 26,
 22,
 22,
 11,
 48,
 19,
 43,
 37,
 42,
 34,
 46,
 28,
 14,
 50,
 30,
 15,
 36,
 42,
 21,
 18,
 29,
 38,
 42,
 45,
 37,
 39,
 48,
 39,
 42,
 50,
 12,
 34,
 49,
 12,
 25,
 29],[40,
 34,
 20,
 13,
 14,
 49,
 13,
 42,
 49,
 43,
 12,
 12,
 21,
 31,
 44,
 18,
 36,
 44,
 20,
 22,
 16,
 50,
 18,
 50,
 20,
 13,
 34,
 29,
 36,
 50,
 38,
 24,
 46,
 19,
 49,
 41,
 39,
 33,
 13,
 38,
 41,
 23,
 49,
 30,
 37,
 20,
 14,
 31,
 21,
 30,
 48,
 36,
 45,
 36,
 42,
 25,
 22,
 45,
 16,
 15,
 41,
 19,
 39,
 37,
 11,
 11,
 36,
 12,
 21,
 10,
 14,
 21,
 47,
 38,
 16,
 41,
 36,
 39,
 50,
 14,
 21,
 47,
 39,
 46,
 31,
 24,
 44,
 28,
 15,
 25,
 24,
 12,
 35,
 19,
 37,
 23,
 24,
 35,
 26,
 40],
 [32,
 13,
 20,
 33,
 26,
 46,
 48,
 38,
 12,
 49,
 13,
 47,
 17,
 13,
 45,
 35,
 47,
 13,
 26,
 42,
 29,
 29,
 16,
 24,
 37,
 33,
 35,
 22,
 36,
 24,
 35,
 13,
 23,
 43,
 29,
 37,
 41,
 32,
 47,
 31,
 48,
 15,
 49,
 44,
 11,
 39,
 48,
 43,
 47,
 49,
 21,
 48,
 39,
 35,
 45,
 28,
 28,
 11,
 33,
 29,
 22,
 22,
 14,
 43,
 33,
 30,
 31,
 31,
 17,
 12,
 12,
 48,
 23,
 40,
 50,
 41,
 32,
 19,
 47,
 49,
 30,
 24,
 18,
 24,
 43,
 13,
 14,
 23,
 33,
 39,
 20,
 38,
 22,
 21,
 49,
 15,
 23,
 32,
 10,
 16],
 [26,
 31,
 39,
 17,
 27,
 25,
 22,
 32,
 50,
 43,
 12,
 49,
 40,
 44,
 38,
 30,
 23,
 42,
 46,
 26,
 42,
 45,
 22,
 42,
 19,
 40,
 34,
 39,
 38,
 39,
 26,
 30,
 42,
 39,
 31,
 46,
 30,
 49,
 11,
 50,
 20,
 22,
 49,
 19,
 43,
 19,
 15,
 43,
 25,
 27,
 32,
 33,
 45,
 49,
 18,
 33,
 20,
 49,
 44,
 38,
 45,
 46,
 11,
 28,
 21,
 18,
 30,
 18,
 46,
 32,
 10,
 45,
 42,
 21,
 35,
 36,
 10,
 31,
 42,
 39,
 40,
 25,
 40,
 19,
 40,
 37,
 21,
 42,
 15,
 44,
 43,
 38,
 17,
 17,
 10,
 48,
 27,
 19,
 49,
 39],
 [13,
 28,
 50,
 48,
 37,
 12,
 24,
 32,
 35,
 49,
 37,
 32,
 41,
 41,
 30,
 17,
 28,
 49,
 36,
 18,
 19,
 13,
 10,
 41,
 11,
 49,
 25,
 41,
 24,
 40,
 36,
 30,
 35,
 18,
 32,
 48,
 32,
 37,
 41,
 40,
 15,
 11,
 40,
 36,
 23,
 26,
 17,
 40,
 10,
 48,
 23,
 31,
 30,
 12,
 19,
 29,
 47,
 41,
 47,
 43,
 41,
 28,
 33,
 13,
 14,
 32,
 15,
 31,
 36,
 45,
 47,
 30,
 13,
 24,
 40,
 24,
 50,
 44,
 30,
 37,
 38,
 49,
 16,
 26,
 29,
 45,
 37,
 43,
 27,
 27,
 23,
 43,
 50,
 40,
 14,
 30,
 23,
 29,
 49,
 25]
]
a = [
   [18,
 12,
 12,
 13,
 19,
 13,
 13,
 9,
 15,
 6,
 20,
 23,
 7,
 24,
 19,
 15,
 25,
 13,
 8,
 19,
 13,
 12,
 25,
 7,
 11,
 18,
 7,
 24,
 16,
 19,
 10,
 16,
 14,
 11,
 23,
 21,
 13,
 5,
 12,
 10,
 5,
 20,
 5,
 14,
 21,
 25,
 18,
 22,
 18,
 9,
 12,
 6,
 9,
 23,
 6,
 11,
 15,
 7,
 24,
 12,
 16,
 18,
 14,
 15,
 24,
 23,
 16,
 7,
 15,
 5,
 13,
 22,
 10,
 23,
 6,
 25,
 8,
 7,
 9,
 11,
 8,
 9,
 11,
 13,
 9,
 8,
 16,
 13,
 17,
 11,
 7,
 8,
 7,
 8,
 14,
 14,
 20,
 12,
 8,
 11],
  [7,
 10,
 8,
 13,
 13,
 22,
 15,
 6,
 10,
 5,
 12,
 8,
 7,
 16,
 14,
 22,
 6,
 19,
 17,
 23,
 7,
 23,
 18,
 22,
 12,
 7,
 6,
 5,
 7,
 21,
 21,
 18,
 14,
 22,
 9,
 15,
 11,
 18,
 15,
 21,
 9,
 21,
 24,
 15,
 15,
 5,
 16,
 24,
 16,
 7,
 5,
 11,
 6,
 9,
 20,
 7,
 11,
 16,
 6,
 24,
 5,
 22,
 24,
 5,
 22,
 24,
 22,
 18,
 12,
 7,
 12,
 21,
 7,
 16,
 18,
 12,
 6,
 11,
 19,
 20,
 15,
 12,
 18,
 5,
 10,
 15,
 24,
 12,
 12,
 22,
 7,
 17,
 23,
 24,
 10,
 20,
 18,
 7,
 8,
 8],
 [16,
 20,
 24,
 25,
 13,
 21,
 24,
 22,
 6,
 17,
 12,
 21,
 22,
 14,
 5,
 16,
 25,
 16,
 8,
 10,
 20,
 14,
 16,
 19,
 21,
 10,
 5,
 14,
 11,
 6,
 10,
 16,
 15,
 19,
 9,
 25,
 11,
 7,
 8,
 24,
 12,
 25,
 12,
 5,
 17,
 22,
 17,
 9,
 5,
 24,
 19,
 7,
 24,
 9,
 19,
 18,
 13,
 20,
 17,
 14,
 15,
 20,
 25,
 8,
 12,
 24,
 19,
 18,
 14,
 12,
 16,
 19,
 12,
 9,
 21,
 5,
 23,
 24,
 19,
 14,
 24,
 25,
 7,
 16,
 13,
 6,
 18,
 24,
 24,
 22,
 23,
 13,
 22,
 11,
 25,
 12,
 24,
 6,
 7,
 15],
 [11,
 18,
 7,
 5,
 9,
 18,
 9,
 17,
 25,
 17,
 12,
 15,
 22,
 18,
 13,
 22,
 23,
 9,
 12,
 6,
 11,
 25,
 25,
 15,
 6,
 7,
 23,
 14,
 17,
 15,
 17,
 13,
 17,
 11,
 20,
 22,
 15,
 16,
 14,
 8,
 9,
 20,
 17,
 20,
 11,
 19,
 22,
 16,
 25,
 5,
 19,
 13,
 23,
 8,
 13,
 12,
 7,
 20,
 5,
 19,
 11,
 11,
 19,
 20,
 5,
 21,
 8,
 7,
 15,
 20,
 18,
 18,
 23,
 17,
 10,
 12,
 19,
 16,
 5,
 21,
 16,
 8,
 9,
 12,
 21,
 7,
 5,
 7,
 24,
 25,
 18,
 11,
 17,
 11,
 7,
 12,
 16,
 23,
 5,
 18],
 [5,
 23,
 11,
 11,
 17,
 17,
 25,
 18,
 21,
 12,
 5,
 7,
 15,
 15,
 14,
 10,
 17,
 12,
 5,
 10,
 15,
 24,
 23,
 18,
 19,
 5,
 5,
 16,
 25,
 15,
 17,
 11,
 15,
 11,
 11,
 5,
 24,
 11,
 9,
 21,
 6,
 6,
 6,
 18,
 21,
 5,
 21,
 14,
 16,
 5,
 25,
 23,
 5,
 20,
 16,
 20,
 10,
 18,
 25,
 6,
 14,
 23,
 10,
 24,
 25,
 5,
 24,
 5,
 15,
 19,
 12,
 25,
 17,
 9,
 24,
 22,
 16,
 7,
 12,
 10,
 15,
 5,
 18,
 14,
 20,
 25,
 16,
 22,
 19,
 9,
 21,
 10,
 7,
 12,
 5,
 10,
 5,
 21,
 17,
 5]
]
bLis = [281,294,294,305,302]
L = 100


def gtypeToPtype(gtype):
    c = 0;
    penal = 0
    rest_b = []
    for i in range(m):
        rest_b.append(bLis[i])
    for i in range(n):
        c += cost[gtype[i]][i]
        rest_b[gtype[i]] -= a[gtype[i]][i]
    for i in range(m):
        tmp = rest_b[i]
        if tmp<0:
            penal -= tmp
    if penal > 0:
        c += 10000
    return(c)


def fitnessFunction(p):
    return(p)
 

   
## define classes
class Agent(object):
     
    def __init__(self, gtype):
        self.genotype= gtype[:]
        self.phenotype= None
        self.fitness= 0
   
    def getOffspring(self):
        o = Agent(self.genotype)
   
        for i in range(L):
            if (rnd.random()<MUT):
                Idx = rnd.randint(0,L-1)  
                o.genotype[Idx] = rnd.randint(0,m-1)
                  
        return(o)
  
    def develop(self, dfunc):
        self.phenotype= dfunc(self.genotype)
  
    def evaluate(self, efunc):
        self.fitness= efunc(self.phenotype)
         
    
def selectAnAgentByTournament(pop):
    leng = len(pop)


    # 10個選んで，適応度の一番小さいpopを返す
    dic = {}
    for i in range(160):
        Idx = rnd.randint(0,leng-1)
        dic[Idx] = pop[Idx].fitness
    dic2 = sorted(dic.items(), key=lambda x:x[1])       
    return pop[dic2[0][0]]
   
def crossover(a1, a2):
    point1= rnd.randint(1, L-1)
    point2= rnd.randint(1, L-1)
    while point1==point2:
        point2= rnd.randint(1, L-1)
    bigger = max(point1,point2)
    smaller = min(point1,point2)
    for i in range(smaller,bigger):
        a1.genotype[i], a2.genotype[i]= a2.genotype[i], a1.genotype[i]
  


  
  
  
# initialize variables
SEED=101
T=100
N= 200
G= 100
# L= 20
MUT= 0.02
CROSS= 0.2
rnd.seed(SEED)
population = []

for i in range(N):
    tmpList = [] 
    for j in range(n):
        tmpList.append(rnd.randint(0,m-1))
    population.append(Agent(rnd.sample(tmpList,len(tmpList))))
fig= plt.figure()
   
#some variables for graphs
averageFitness= []
bestFitness= []
best= population[0]

# main loop (call back function for animation)
def main_loop(t):
    step()
    update(t)
 
# events in a step
def step():
    global population, tmpX,tmpY
    #fitness evaluation
    best= population[0]
    for a in population:
        a.develop(gtypeToPtype)
        a.evaluate(fitnessFunction)
        if(a.fitness < best.fitness):
            best= a
    averageFitness.append(np.average([a.fitness for a in population]))
    bestFitness.append(best.fitness)     
    

                         
 
    print(str(best.genotype)+":"+str(best.fitness))
    #evolution
    newpop= []
    for i in range(int(N/2)):
        n1= selectAnAgentByTournament(population).getOffspring()
        n2= selectAnAgentByTournament(population).getOffspring()
 
        if rnd.random()<CROSS:
            crossover(n1, n2)
        newpop.append(n1)
        newpop.append(n2)
     
    population = newpop
         
# update function for graph
def update(t):
    fig.clear()
      
    ax1= fig.add_subplot(1, 1, 1)
    ax1.plot(averageFitness)
    ax1.set_title('g = ' + str(t))
    ax1.plot(bestFitness)
    ax1.set_xlabel("generation")
    ax1.set_ylabel("average / best fitness")    

    # ax2= fig.add_subplot(2, 1, 2)
    # ax2.plot(CoordinateX, CoordinateY,'.')
    # ax2.plot(tmpX, tmpY)
    # ax2.set_ylabel("fitness")
 
    fig.tight_layout()
     
     
ani = animation.FuncAnimation(fig, main_loop, np.arange(0, T), interval=25, repeat=False)
plt.show()
